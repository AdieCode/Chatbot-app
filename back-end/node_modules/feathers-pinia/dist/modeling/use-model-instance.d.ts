import type { CloneOptions } from '../stores';
import type { AnyData, ById, Params } from '../types';
import type { BaseModelData, ModelInstanceData } from './types';
interface UseModelInstanceOptions<M, Q extends AnyData> {
    idField: string;
    clonesById: ById<AnyData>;
    clone: (item: M, data?: {}, options?: CloneOptions) => M;
    commit: (item: M, data?: Partial<M>) => M;
    reset: (item: M, data?: {}) => M;
    createInStore: (data: M | M[]) => M | M[];
    removeFromStore: (data: M | M[] | null, params?: Params<Q>) => M | M[] | null;
}
export declare const useModelInstance: <M extends AnyData, Q extends AnyData>(data: Partial<M & BaseModelData>, options: UseModelInstanceOptions<M, Q>) => Partial<M & BaseModelData>;
export {};
