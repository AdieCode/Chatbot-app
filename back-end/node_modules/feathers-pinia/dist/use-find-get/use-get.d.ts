import type { Id } from '@feathersjs/feathers';
import type { ComputedRef } from 'vue-demi';
import type { AnyData } from '../types';
import type { UseFindGetDeps, UseGetParams } from './types';
import type { MaybeRef } from '@vueuse/core';
type MaybeComputed<M> = ComputedRef<M> | MaybeRef<M>;
export declare const useGet: (_id: MaybeComputed<Id | null>, _params: MaybeRef<UseGetParams> | undefined, deps: UseFindGetDeps) => {
    params: import("vue-demi").Ref<UseGetParams>;
    isSsr: ComputedRef<any>;
    data: ComputedRef<any>;
    ids: import("vue-demi").Ref<Id[]>;
    getFromStore: any;
    get: () => Promise<AnyData>;
    request: import("vue-demi").Ref<{
        then: <TResult1 = AnyData, TResult2 = never>(onfulfilled?: ((value: AnyData) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
        catch: <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<AnyData | TResult>;
        finally: (onfinally?: (() => void) | null | undefined) => Promise<AnyData>;
        readonly [Symbol.toStringTag]: string;
    } | null>;
    requestCount: import("vue-demi").Ref<number>;
    queryWhen: (_queryWhenFn: () => boolean) => void;
    isPending: ComputedRef<boolean>;
    hasBeenRequested: ComputedRef<boolean>;
    hasLoaded: ComputedRef<boolean>;
    error: ComputedRef<any>;
    clearError: () => null;
};
export {};
