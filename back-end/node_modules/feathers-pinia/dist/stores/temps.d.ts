import type { AnyData } from '../types';
import type { beforeWriteFn, onReadFn } from './types';
import type { StorageMapUtils } from './storage';
interface UseServiceTempsOptions<M extends AnyData> {
    getId: (item: M) => string;
    itemStorage: StorageMapUtils<M>;
    onRead?: onReadFn<M>;
    beforeWrite?: beforeWriteFn<M>;
}
export declare const useServiceTemps: <M extends AnyData>(options: UseServiceTempsOptions<M>) => {
    tempStorage: {
        byId: import("../types").ById<M>;
        list: import("vue").ComputedRef<M[]>;
        ids: import("vue").ComputedRef<string[]>;
        getId: (item: M) => string;
        clear: () => void;
        has: (item: M) => boolean;
        hasItem: (id: import("@feathersjs/feathers/lib").Id) => boolean;
        get: (item: M) => M;
        getItem: (id: import("@feathersjs/feathers/lib").Id) => M;
        set: (item: M) => M;
        setItem: (id: import("@feathersjs/feathers/lib").Id, item: M) => M;
        remove: (item: M) => boolean;
        removeItem: (id: import("@feathersjs/feathers/lib").Id) => boolean;
        getKeys: () => string[];
        merge: (item: M) => M;
    };
    moveTempToItems: (data: M) => M;
};
export {};
