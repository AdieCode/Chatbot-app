import { MaybeRef } from '@vueuse/core';
import type { Id } from '@feathersjs/feathers';
import type { AnyData, Params } from '../types';
import type { StorageMapUtils } from './storage';
interface UseServiceLocalOptions<M extends AnyData> {
    idField: string;
    itemStorage: StorageMapUtils<M>;
    tempStorage?: StorageMapUtils<M>;
    cloneStorage?: StorageMapUtils<M>;
    addItemToStorage: any;
    whitelist?: string[];
    paramsForServer?: string[];
    customSiftOperators?: Record<string, any>;
}
export declare function useServiceLocal<M extends AnyData, Q extends AnyData>(options: UseServiceLocalOptions<M>): {
    findInStore: (_params: MaybeRef<Params<Q>>) => {
        total: import("vue-demi").ComputedRef<number>;
        limit: import("vue-demi").ComputedRef<any>;
        skip: import("vue-demi").ComputedRef<any>;
        data: import("vue-demi").ComputedRef<any[]>;
    };
    findOneInStore: (params: MaybeRef<Params<Q>>) => import("vue-demi").ComputedRef<any>;
    countInStore: (params: MaybeRef<Params<Q>>) => import("vue-demi").ComputedRef<number>;
    getFromStore: (id: MaybeRef<Id | null>, params?: Params<Q>) => import("vue-demi").ComputedRef<M | null>;
    createInStore: <N = MaybeRef<M | M[]>>(data: N) => N;
    patchInStore: (_idOrData: MaybeRef<M | M[] | Id | null>, _data?: MaybeRef<AnyData>, _params?: MaybeRef<Params<Q>>) => any;
    removeFromStore: (data: M | M[] | null, params?: Params<Q>) => M | M[] | null;
};
export {};
