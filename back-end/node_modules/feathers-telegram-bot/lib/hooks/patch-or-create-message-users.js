'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchOrCreateMessageUsers;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function patchOrCreateMessageUsers() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return function (hook) {
    options = Object.assign({
      telegramIdField: 'telegramId',
      as: 'telegram',
      service: 'users',
      all: true
    }, options);
    var service = hook.app.service(options.service);
    var patchOrCreate = function patchOrCreate(user) {
      return service.find({
        query: _defineProperty({}, options.telegramIdField, user.id),
        paginate: false
      }).then(function (data) {
        var userData = options.as ? _defineProperty({}, options.as, user) : user;
        if (data.length) {
          var props = Object.keys(user);
          var changed = props.some(function (prop) {
            return JSON.stringify(data[0][prop]) != JSON.stringify(user[prop]);
          });
          if (changed) {
            return service.patch(data[0][service.id], userData);
          } else {
            return Promise.resolve(data[0]);
          }
        } else {
          return service.create(userData);
        }
      });
    };
    if (hook.params.telegram) {
      var promises = [];
      var message = hook.params.message;
      if (message.from) {
        promises.push(patchOrCreate(message.from));
      }
      if (options.all && message.forward_from) promises.push(patchOrCreate(message.forward_from));
      return Promise.all(promises).then(function () {
        return hook;
      });
    }
    return hook;
  };
}
module.exports = exports['default'];