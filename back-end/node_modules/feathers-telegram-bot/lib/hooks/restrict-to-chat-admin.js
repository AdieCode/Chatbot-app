'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = restrictToChatAdmin;

var _feathersErrors = require('feathers-errors');

var _feathersErrors2 = _interopRequireDefault(_feathersErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function restrictToChatAdmin() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return function (hook) {
    options = Object.assign({
      userIdField: 'telegramId',
      chatIdField: 'telegramId',
      service: 'chats',
      fromMessage: true
    }, options);
    if (hook.type !== 'before') {
      throw new Error('The \'restrictToChatAdmin\' hook should only be used as a \'before\' hook.');
    }
    var userId = hook.params.user[options.userIdField];
    var chatId = void 0;
    if (hook.params.telegram && options.fromMessage) {
      chatId = hook.params.message.chat.id;
    } else {
      chatId = hook.id || hook.query[chatIdField];
    }
    var service = hook.app.service(options.service);
    return service.find({
      query: _defineProperty({}, options.chatIdField, chatId),
      paginate: false
    }).then(function (data) {
      var chat = data[0];
      if (chat.type == 'private' || chat.all_members_are_administrators) {
        return hook;
      } else {
        return hook.app.telegram.getChatAdministrators(chatId).then(function (admins) {
          if (!admins.some(function (admin) {
            return admin.user.id == userId;
          })) throw new _feathersErrors2.default.Forbidden('You must be a chat admin to perform this action');
          return hook;
        });
      }
    });
  };
}
module.exports = exports['default'];